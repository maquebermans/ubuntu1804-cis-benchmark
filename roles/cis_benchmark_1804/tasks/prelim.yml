---
# Preliminary tasks that should always be run
# List users in order to look files inside each home directory
- name: "PRELIM | List users accounts"
  command: "awk -F: '{print $1}' /etc/passwd"
  register: users
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather homes with wrong permissions on /home"
  shell: 'set -o pipefail;
      for dir in $(getent passwd | cut -d '':'' -f 6 | awk ''$1 ~ /^\/home\//'');
      do
        perm=$(stat -L -c "%A" "$dir" );
        if [ -d $dir ] && ([ "${perm:7:3}" != "---" ] || [ "${perm:5:1}" == "w" ] );
        then
          echo -n "$dir ";
        fi;
      done'
  args:
    executable: /bin/bash
  register: homes_with_perms
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather accounts with empty password fields"
  shell: "set -o pipefail;
      cat /etc/shadow | awk -F: '($2 == \"\" ) {j++;print $1; } END {exit j}'"
  args:
      executable: /bin/bash
  register: empty_password_accounts
  changed_when: false
  check_mode: false

- name: "PRELIM | Check if root has password"
  shell: 'set -o pipefail;
       getent shadow | grep root | awk -F: ''($2 == "*" || $2 == "!" ) { printf $2; }'''
  args:
    executable: /bin/bash
  register: current_root_password
  changed_when: false
  check_mode: false

- name: "PRELIM | Gather UID 0 accounts other than root"
  shell: "set -o pipefail;
      cat /etc/passwd | awk -F: '($3 == 0 && $1 != \"root\") {i++;print $1 } END {exit i}'"
  args:
      executable: /bin/bash
  register: uid_zero_accounts_except_root
  changed_when: false
  check_mode: false

- name: "PRELIM | Check if cURL present"
  shell: "set -o pipefail;
      which curl | wc -l"
  args:
      executable: /bin/bash
  register: check_curl
  failed_when: check_curl.rc not in [0,1]

- name: "PRELIM | Install cURL"
  apt:
    name: curl
    state: present
    update_cache: true
  when: check_curl.stdout | int < 1

- name: "PRELIM | Add GCP gpg key"
  shell: "set -o pipefail;
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys FEEA9169307EA071 && apt-get update"
  args:
      executable: /bin/bash
  register: gcp_gpg_key
  ignore_errors: True

- name: "PRELIM | Add GCP gpg key second try"
  shell: "set -o pipefail;
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add - && apt-get update"
  args:
      executable: /bin/bash
  when: gcp_gpg_key.rc >= 2

- name: "PRELIM | Fix datadog gpg key"
  shell: "set -o pipefail;
      apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 33EE313BAD9589B7 && apt-get update"
  args:
      executable: /bin/bash
  ignore_errors: True
  
- name: "PRELIM | Run apt cache update"
  apt:
    update_cache: true
  changed_when: false
  register: apt_cache_update
  ignore_errors: True

- name: "PRELIM | Section 4.1 | Configure System Accounting (auditd)"
  apt:
    name: "{{ auditd_package[ansible_os_family] }}"
    state: present
    install_recommends: false
  when:
      - not ubuntu1804cis_auditd_disable

- name: "PRELIM | Section 4.1.3 | Check events that modify date and time information"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep time-change | wc -l"
  args:
      executable: /bin/bash
  register: check_413_audit_rules
  failed_when: check_413_audit_rules.rc != 1 and check_413_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.4 | Check group audit rules availability"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep group | wc -l"
  args:
      executable: /bin/bash
  register: check_414_audit_rules
  #changed_when: false
  failed_when: check_414_audit_rules.rc != 1 and check_414_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.5 | Check events that modify the system's network environment"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep networks | wc -l"
  args:
      executable: /bin/bash
  register: check_415_audit_rules
  #changed_when: false
  failed_when: check_415_audit_rules.rc != 1 and check_415_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.6 | Check events that modify the system's Mandatory Access Controls"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep apparmor | wc -l"
  args:
      executable: /bin/bash
  register: check_416_audit_rules
  #changed_when: false
  failed_when: check_416_audit_rules.rc != 1 and check_416_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.7 | Check events that modify the system's login and logout events"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep faillog | wc -l"
  args:
      executable: /bin/bash
  register: check_417_audit_rules
  #changed_when: false
  failed_when: check_417_audit_rules.rc != 1 and check_417_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.8 | Check session initiation information"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep utmp | wc -l"
  args:
      executable: /bin/bash
  register: check_418_audit_rules
  #changed_when: false
  failed_when: check_418_audit_rules.rc != 1 and check_418_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.9 | Check discretionary access control permission modification events"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep perm_mod | wc -l"
  args:
      executable: /bin/bash
  register: check_419_audit_rules
  #changed_when: false
  failed_when: check_419_audit_rules.rc != 1 and check_419_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.10 | Check unsuccessful unauthorized file access attempts"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep access | wc -l"
  args:
      executable: /bin/bash
  register: check_4110_audit_rules
  #changed_when: false
  failed_when: check_4110_audit_rules.rc != 1 and check_4110_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.11 | Check use of privileged commands"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep privileged | wc -l"
  args:
      executable: /bin/bash
  register: check_4111_audit_rules
  #changed_when: false
  failed_when: check_4111_audit_rules.rc != 1 and check_4111_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.12 | Check successful file system mounts"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep mounts | wc -l"
  args:
      executable: /bin/bash
  register: check_4112_audit_rules
  #changed_when: false
  failed_when: check_4112_audit_rules.rc != 1 and check_4112_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.13 | Check file deletion events by users"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep unlinkat | wc -l"
  args:
      executable: /bin/bash
  register: check_4113_audit_rules
  #changed_when: false
  failed_when: check_4113_audit_rules.rc != 1 and check_4113_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.14 | Check changes to system administration scope (sudoers)"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep scope | wc -l"
  args:
      executable: /bin/bash
  register: check_4114_audit_rules
  #changed_when: false
  failed_when: check_4114_audit_rules.rc != 1 and check_4114_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.15 | Check system administrator actions (sudolog)"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep actions | wc -l"
  args:
      executable: /bin/bash
  register: check_4115_audit_rules
  #changed_when: false
  failed_when: check_4115_audit_rules.rc != 1 and check_4115_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.16 | Check kernel module loading and unloading"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep networks | wc -l"
  args:
      executable: /bin/bash
  register: check_4116_audit_rules
  #changed_when: false
  failed_when: check_4116_audit_rules.rc != 1 and check_4116_audit_rules.rc != 0

- name: "PRELIM | Section 4.1.17 | Check audit configuration is immutable"
  shell: "set -o pipefail;
      cat /etc/audit/audit.rules | grep 'e 2' | wc -l"
  args:
      executable: /bin/bash
  register: check_4117_audit_rules
  #changed_when: false
  failed_when: check_4117_audit_rules.rc != 1 and check_4117_audit_rules.rc != 0

- name: "PRELIM | Section 5.1 | Configure cron"
  apt:
    name: "{{ cron_package[ansible_os_family] }}"
    state: present
    install_recommends: false

- name: "PRELIM | Check if prelink package is installed"
  command: "{{ prelim_check_package_command[ansible_os_family] }} prelink"
  register: prelink_installed
  changed_when: false
  failed_when: false
  check_mode: false
  tags:
    - skip_ansible_lint

- name: "PRELIM | Check if postfix package is installed"
  command: "{{ prelim_check_package_command[ansible_os_family] }} postfix"
  register: postfix_installed
  changed_when: false
  failed_when: false
  check_mode: false
  tags:
    - skip_ansible_lint

# Individual service checks
- name: "PRELIM | Check for xinetd service"
  shell: "set -o pipefail;
      systemctl show xinetd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: xinetd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for openbsd-inetd service"
  shell: "set -o pipefail;
      dpkg -s openbsd-inetd | grep -o 'ok installed'; true"
  args:
      executable: /bin/bash
  register: openbsd_inetd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ntpd service"
  shell: "set -o pipefail;
      systemctl show {{ ntp_service[ansible_os_family] }} | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: ntpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for chronyd service"
  shell: "set -o pipefail;
      systemctl show {{ chrony_service[ansible_os_family] }} | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: chronyd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for avahi-daemon service"
  shell: "set -o pipefail;
      systemctl show avahi-daemon | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: avahi_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for cups service"
  shell: "set -o pipefail;
      systemctl show cups | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: cups_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for dhcpd service"
  shell: "set -o pipefail;
      systemctl show dhcpd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: dhcpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for slapd service"
  shell: "set -o pipefail;
      systemctl show slapd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: slapd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for nfs service"
  shell: "set -o pipefail;
      systemctl show nfs | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: nfs_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rpcbind service"
  shell: "set -o pipefail;
      systemctl show rpcbind | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: rpcbind_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for named service"
  shell: "set -o pipefail;
      systemctl show named | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: named_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for vsftpd service"
  shell: "set -o pipefail;
      systemctl show vsftpd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: vsftpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for httpd service"
  shell: "set -o pipefail;
      systemctl show apache2 | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: httpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for dovecot service"
  shell: "set -o pipefail;
      systemctl show dovecot | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: dovecot_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for smb service"
  shell: "set -o pipefail;
      systemctl show smbd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: smb_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for squid service"
  shell: "set -o pipefail;
      systemctl show squid | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: squid_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for snmpd service"
  shell: "set -o pipefail;
      systemctl show snmpd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: snmpd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ypserv service"
  shell: "set -o pipefail;
      systemctl show nis | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: ypserv_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rsh.socket service"
  shell: "set -o pipefail;
      systemctl show rsh.socket | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: rsh_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rlogin.socket service"
  shell: "set -o pipefail;
      systemctl show rlogin.socket | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: rlogin_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rexec.socket service"
  shell: "set -o pipefail;
      systemctl show rexec.socket | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: rexec_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for telnet service"
  shell: "set -o pipefail;
      systemctl show telnetd | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: telnet_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for tftp service"
  shell: "set -o pipefail;
      systemctl show tftpd-hpa | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: tftp_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for rsyncd service"
  shell: "set -o pipefail;
      systemctl show rsync | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: rsyncd_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for ntalk service"
  shell: "set -o pipefail;
      systemctl show ntalk | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: ntalk_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check for autofs service"
  shell: "set -o pipefail;
      systemctl show autofs | grep LoadState | cut -d = -f 2"
  args:
      executable: /bin/bash
  register: autofs_service_status
  changed_when: false
  check_mode: false

- name: "PRELIM | Check the grub file existance"
  stat:
    path: /etc/default/grub
  register: grub_file

- name: "PRELIM | Check the grub.cfg configuration"
  stat:
    path: /boot/grub/grub.cfg
  register: grub_cfg

- name: "PRELIM | Check the grub.conf configuration"
  stat:
    path: /boot/grub/grub.conf
  register: grub_conf

- name: "PRELIM | Check the menu.lst configuration"
  stat:
    path: "/boot/grub/menu.lst"
  register: menu_lst

- name: "PRELIM | Check that system accounts are non-login #1"
  shell: >
    set -o pipefail &&
    egrep -v "^\+" /etc/passwd | awk -F: '($1!="root" && $1!="sync" &&
    $1!="shutdown" && $1!="halt" && $3<1000 && $7!="/usr/sbin/nologin" &&
    $7!="/bin/false") {print}'
  args:
      executable: /bin/bash
  register: system_accounts_non_login_1
  changed_when: false
  check_mode: false


- name: "PRELIM | Check that system accounts are non-login #2"
  shell: >
    set -o pipefail &&
    for user in `awk -F: '($1!="root" && $3 < 1000) {print $1 }' /etc/passwd`; do
    passwd -S $user | awk -F ' ' '($2!="L") {print $1}'; done
  args:
      executable: /bin/bash
  register: system_accounts_non_login_2
  changed_when: false
  check_mode: false

- name: "PRELIM | Check that users last password change date are in the future"
  shell: |
      set -o pipefail;
      awk -F: '{print $1}' /etc/shadow | while read -r usr
      do
        if [[ $(date --date="$(chage --list "$usr" | grep '^Last password change' | cut -d: -f2)" +%s) > $(date +%s) ]];then
          echo "$usr"
        fi
      done
  args:
      executable: /bin/bash
  register: users_password_change_date_in_future
  changed_when: False
  check_mode: false

- name: "PRELIM | Get /tmp UUID"
  shell: "set -o pipefail;
      lsblk -o mountpoint,uuid | grep /tmp | awk '{print $2}'"
  args:
      executable: /bin/bash
  register: tmp_uuid
  ignore_errors: True
